name: Create Deployment Release

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "docker-compose.production.yml"
      - ".github/workflows/deploy.yml"
  workflow_dispatch: # Allows manual triggering

env:
  SERVER_HOST: cides06.gm.fh-koeln.de

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm run test || echo "⚠️ No tests found - continuing with build"

      - name: TypeScript compilation check
        run: |
          cd backend
          npm run build

  create-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Create Deployment Package

    steps:
      - uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          echo "📦 Creating deployment package for manual deployment..."

          # Create deployment directory structure
          mkdir -p release/backend

          # Copy backend files (exclude unnecessary files)
          echo "📁 Copying backend files..."
          rsync -av --exclude='node_modules' --exclude='dist' --exclude='*.log' --exclude='.git' --exclude='.env*' backend/ release/backend/

          # Copy Docker configuration
          echo "🐳 Copying Docker configuration..."
          cp docker-compose.production.yml release/docker-compose.yml

          # Create environment template
          echo "⚙️ Creating environment template..."
          cat > release/.env.production << 'EOF'
          # Production Environment Configuration for PalPalette
          # IMPORTANT: Edit these values before deploying!

          NODE_ENV=production
          PORT=3000
          WS_PORT=3001

          # Database Configuration
          DB_HOST=postgres
          DB_PORT=5432
          DB_USERNAME=postgres
          DB_PASSWORD=CHANGE_THIS_TO_YOUR_SECURE_PASSWORD
          DB_DATABASE=palpalette
          DB_SYNC=true

          # JWT Configuration - Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
          JWT_SECRET=CHANGE_THIS_TO_YOUR_SECURE_JWT_SECRET
          JWT_EXPIRES_IN=7d

          # Server Configuration
          CORS_ORIGIN=http://cides06.gm.fh-koeln.de

          # Timezone
          TZ=Europe/Berlin
          EOF

          # Create deployment script
          echo "📜 Creating deployment script..."
          cat > release/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 PalPalette Deployment Script"
          echo "==============================="
          echo ""

          # Check if .env.production has been configured
          if grep -q "CHANGE_THIS" .env.production; then
              echo "❌ ERROR: Please edit .env.production first!"
              echo ""
              echo "Required changes:"
              echo "1. Set DB_PASSWORD to a secure password"
              echo "2. Set JWT_SECRET to a secure random string"
              echo ""
              echo "Generate JWT secret with:"
              echo "  node -e \"console.log(require('crypto').randomBytes(64).toString('hex'))\""
              echo ""
              exit 1
          fi

          echo "🛑 Stopping existing containers..."
          docker-compose down || true

          echo "🧹 Cleaning up old images..."
          docker system prune -f || true

          echo "🏗️ Building and starting containers..."
          docker-compose --env-file .env.production up -d --build

          echo "⏳ Waiting for services to start..."
          sleep 30

          echo "📊 Checking container status..."
          docker-compose ps

          echo ""
          echo "🧪 Testing deployment..."
          sleep 10

          # Test backend health
          if curl -f --max-time 10 "http://localhost:3000/health" > /dev/null 2>&1; then
              echo "✅ Backend health check passed!"
          else
              echo "⚠️ Backend health check failed - checking logs..."
              docker-compose logs --tail=20 backend
          fi

          echo ""
          echo "🎉 Deployment completed!"
          echo "🌐 Backend API: http://cides06.gm.fh-koeln.de:3000"
          echo "🔌 WebSocket: ws://cides06.gm.fh-koeln.de:3001"
          echo ""
          echo "📋 Next steps:"
          echo "1. Update your mobile app configuration"
          echo "2. Flash updated ESP32 firmware"
          echo "3. Test the application end-to-end"
          EOF
          chmod +x release/deploy.sh

          # Create rollback script
          echo "🔄 Creating rollback script..."
          cat > release/rollback.sh << 'EOF'
          #!/bin/bash
          echo "🔄 Rolling back PalPalette deployment..."

          # Stop current containers
          docker-compose down

          # Remove current images
          docker-compose down --rmi all || true

          echo "✅ Rollback completed. You can now deploy a previous version."
          EOF
          chmod +x release/rollback.sh

          # Create comprehensive README
          echo "📖 Creating deployment README..."
          cat > release/README.md << 'EOF'
          # PalPalette Deployment Package

          This package contains everything needed to deploy PalPalette to your production server.

          ## 📋 Prerequisites

          - Docker and Docker Compose installed on server
          - VPN connection to access server
          - SSH access to server

          ## 🚀 Quick Deployment

          ### 1. Upload to Server
          ```bash
          # Connect to VPN first, then upload files
          scp -r * user@cides06.gm.fh-koeln.de:/opt/palpalette/
          ```

          ### 2. Configure Environment
          ```bash
          # SSH to server
          ssh user@cides06.gm.fh-koeln.de
          cd /opt/palpalette

          # Edit environment variables
          nano .env.production
          ```

          **Required Changes in .env.production:**
          - Set `DB_PASSWORD` to a secure password
          - Set `JWT_SECRET` to a secure random string

          **Generate JWT Secret:**
          ```bash
          node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
          ```

          ### 3. Deploy
          ```bash
          ./deploy.sh
          ```

          ## 📁 Package Contents

          - `backend/` - Backend source code
          - `docker-compose.yml` - Docker configuration
          - `.env.production` - Environment template (EDIT THIS!)
          - `deploy.sh` - Deployment script
          - `rollback.sh` - Rollback script
          - `README.md` - This file

          ## 🔧 Manual Deployment Steps

          If you prefer manual deployment:

          ```bash
          # 1. Stop existing containers
          docker-compose down

          # 2. Build and start with production config
          docker-compose --env-file .env.production up -d --build

          # 3. Check status
          docker-compose ps
          docker-compose logs backend
          ```

          ## ✅ Verification

          After deployment, verify everything works:

          ```bash
          # Test backend API
          curl http://localhost:3000/health

          # Check container status
          docker-compose ps

          # View logs
          docker-compose logs -f backend
          ```

          ## 🔄 Rollback

          If something goes wrong:

          ```bash
          ./rollback.sh
          ```

          ## 🔧 Troubleshooting

          ### Backend won't start
          - Check logs: `docker-compose logs backend`
          - Verify environment variables in `.env.production`
          - Ensure database password is correct

          ### Database connection errors
          - Check PostgreSQL container: `docker-compose logs postgres`
          - Verify DB_PASSWORD matches in both containers

          ### Port conflicts
          - Check if ports 3000/3001 are available: `netstat -tlnp | grep -E '3000|3001'`
          - Stop conflicting services

          ### Out of disk space
          - Clean Docker: `docker system prune -a`
          - Remove old images: `docker image prune -a`

          ## 📱 Post-Deployment Tasks

          After successful backend deployment:

          1. **Update Mobile App**
             - Configuration already points to production server
             - Rebuild and deploy mobile app

          2. **Update ESP32 Controllers**
             - Firmware already configured for production server
             - Flash updated firmware to devices

          3. **Test End-to-End**
             - Verify mobile app connects to backend
             - Verify ESP32 devices connect via WebSocket
             - Test lighting control functionality

          ## 🛡️ Security Notes

          - Keep `.env.production` secure and never commit to git
          - Use strong passwords for database and JWT secret
          - Regularly update Docker images for security patches
          - Monitor logs for unusual activity
          EOF

          # Create timestamp for unique filename
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          # Create archive
          echo "📦 Creating deployment archive..."
          tar -czf palpalette-deployment-${TIMESTAMP}.tar.gz release/

          # Create latest symlink name
          cp palpalette-deployment-${TIMESTAMP}.tar.gz palpalette-deployment-latest.tar.gz

          echo "✅ Deployment package created: palpalette-deployment-${TIMESTAMP}.tar.gz"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: deploy-${{ github.run_number }}
          name: "🚀 PalPalette Deployment v${{ github.run_number }}"
          body: |
            # 🚀 PalPalette Deployment Package

            **Ready for manual deployment to production server**

            ## 📥 Download & Deploy

            1. **Download**: `palpalette-deployment-latest.tar.gz`
            2. **Extract**: `tar -xzf palpalette-deployment-latest.tar.gz`
            3. **Upload**: Copy `release/*` to your server via VPN
            4. **Configure**: Edit `.env.production` with your secrets
            5. **Deploy**: Run `./deploy.sh` on server

            ## 🔧 Quick Commands

            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/deploy-${{ github.run_number }}/palpalette-deployment-latest.tar.gz
            tar -xzf palpalette-deployment-latest.tar.gz

            # Upload to server (via VPN)
            scp -r release/* user@cides06.gm.fh-koeln.de:/opt/palpalette/

            # Deploy on server
            ssh user@cides06.gm.fh-koeln.de "cd /opt/palpalette && ./deploy.sh"
            ```

            ## 📋 What's New

            **Changes in this release:**
            ${{ github.event.head_commit.message }}

            **Commit:** `${{ github.sha }}`

            ## 🎯 Deployment Targets

            - **Backend API**: http://cides06.gm.fh-koeln.de:3000
            - **WebSocket**: ws://cides06.gm.fh-koeln.de:3001

            ## ⚠️ Important Notes

            - **VPN Required**: Connect to VPN before SSH/SCP to server
            - **Edit .env.production**: Set DB_PASSWORD and JWT_SECRET before deploying
            - **Mobile App**: Rebuild after backend deployment
            - **ESP32**: Flash updated firmware after backend deployment

            See `README.md` in the package for detailed instructions.
          files: |
            palpalette-deployment-*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mobile-app-info:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Mobile App & ESP32 Update Info

    steps:
      - name: Mobile App & ESP32 Instructions
        run: |
          echo "📱 Mobile App & ESP32 Update Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The backend deployment package has been created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download Deployment Package" >> $GITHUB_STEP_SUMMARY
          echo "Go to [Releases](https://github.com/${{ github.repository }}/releases) and download the latest deployment package." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Mobile App Update" >> $GITHUB_STEP_SUMMARY
          echo "The app configuration has been updated to point to: **http://cides06.gm.fh-koeln.de:3000**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Rebuild and deploy your mobile app:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'cd palpalette-app' >> $GITHUB_STEP_SUMMARY
          echo 'npm run build' >> $GITHUB_STEP_SUMMARY
          echo 'npx ionic cap sync' >> $GITHUB_STEP_SUMMARY
          echo 'npx ionic cap run android  # or ios' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 ESP32 Controller Update" >> $GITHUB_STEP_SUMMARY
          echo "The controller config has been updated to connect to: **ws://cides06.gm.fh-koeln.de:3001/ws**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Flash the updated firmware to your ESP32 devices - they will automatically connect to the production server." >> $GITHUB_STEP_SUMMARY
